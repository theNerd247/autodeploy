#!/bin/bash

#set the user mask to allow for creation of directories
umask g+w

#files
branchfile=$HOME/gitdeploy
logfile=/var/log/gitdeploy.log

#basepath for the website
webbase=/srv/http/csewiki

TST=0

function userecho
{
	printf "======================================================================\n"
	printf "$1\n"
	printf "======================================================================\n"
}

function create
{
	userecho "A new deployment directory was found\nCreating deployment directory: $branch"
	cd /srv/http/
	
	#check of old dir exists
	if [[ -d "$webbase/.$branch" ]] ; then
		mv ".$DEPLOYDIR" $DEPLOYDIR
	fi
	
	#create repo, set pushed branch
	git clone --branch $branch ~/csewiki.git $DEPLOYDIR

	if [[ ! -d $DEPLOYDIR ]] ; then
		echo "creating directory failed"
		return 1
	else
		echo "Creation success!"
	fi

	exit
}

function pull
{
	userecho "Updating deployment directory: $branch"
	cd $DEPLOYDIR
	
	echo "pulling in updates..."
	git pull origin $branch
}

function commit
{
	userecho "The deployment directory: $branch has been changed since the last push. Commiting the changes before I pull"
	cd $DEPLOYDIR
	git add -A
	git commit -m "pre deployment update for branch: $branch"
	git push origin $branch
	pull
}

function delete
{
	userecho "You've requested that this branch be deleted.\nRemoving from deploy directory list.\n(I'll keep the actual deployment directory incase you need it later.)" 
	mv $DEPLOYDIR "$webbase/.$branch"
	temp=$(grep -v -e "$branch" $branchfile) 
	echo -e "$temp" > $branchfile
	exit
}

#read in branches to track in git
branches=$(cat $branchfile)

#get updated branch
read old new refname

# get deploy branch
for branch in $branches; do
	if [[ $refname == "refs/heads/$branch" ]]; then
		if [[ $TST == 1 ]] ; then
			echo "DEBUG: deploy branch found: $branch"
		fi
		break
	fi
	branch=""
done

# check for no branch 
if [[ -z $branch ]] ; then
	userecho "No valid deployment directory found\n(Contact the server admin if one should be created)"
	exit
fi

#set the DEPLOYDIR
if [[ $branch == "master" ]] ; then
	DEPLOYDIR="$webbase"
else
	DEPLOYDIR="$webbase$branch"
fi

if [[ ! -e refs/heads/$branch ]]; then
	CMD=delete
elif [[ ! -d $DEPLOYDIR ]] ; then
	CMD=create
else
	# get git status
	cd $DEPLOYDIR
	unset GIT_DIR
	status=$(git status --short)
	
	if [[ -z $status ]]; then
		CMD=pull
	else 		
		CMD=commit
	fi
fi

if [[ $TST == 1 ]] ; then
	echo "DEBUG: status: $status"
	echo "DEBUG: refname: $refname DEPLOYDIR: $DEPLOYDIR"
	echo "DEBUG: [LOG UTC:$(date --utc +"%D %T")] $CMD: $branch"
	exit;
fi

# log action
echo "[LOG UTC:$(date --utc +"%D %T")] $CMD: $branch" >> $logfile

# run command based on action
$CMD
